- Every serializable file is either an array of Strings, or simply a String.
- Where every string (every entry of an array where implemented) must be a
    line-separated value -> Every line must represent a separate value, or property
    unless otherwise implemented, as with the News type.
- For the structure of the serials directory, refer to the layout text file.
- If a field, or property, by itself has the potential to cause problems
    over having the delimiter (i.e the line-separator), then it should be
    saved in a separate serializable file. E.g Student.about.
    This, particularly a problem when dealing with the News type.
- Leave primitive types as they are, but...
- If the field is a date, format it using the implementation's standard formatter,
    so it could be reconstructed safely by parsing by the same formatter.



>> Configurations (configs.ser)
Contains the Dashboard's configuration data. Single string.
@Version 0.0.1 [
    0: version <String>
    1: userName <String>

]


>> Settings (settings.ser)
A single string containing all the settings.
@Version 0.0.1 [
    0: noVerifyNeeded <boolean>
    1: confirmExit <boolean>
    2: initialDelay <int>
    3: dismissDelay <int>
    4: lookAndFeelName <String>
    5: backgroundColorName <String>

]


>> Portal (portal.ser)
Contains all portal related data. Single string.
@Version 0.0.1 [
    0: registrationNotice <String>
    1: lastRegistrationNoticeUpdate <String> | Might be 'Never' or a value returned by MDate.format(Date)
    2: admissionNotice <String>
    3: lastAdmissionNoticeUpdate <String> | Might be 'Never' or a value returned by MDate.format(Date)
    4: isAutoSync <boolean>
    5: lastLogin <String> | as returned by MDate.format(Date)

]


>> Modules (modules/ )
Courses are serialized to an array of Strings where every
entry of the array is further split by the host platform's
specific line-separator, as elaborated above.
Every entry represents a course, and every
line therein represents a property of the course,
such that virtually the same course could be reconstructed
during build.
--> @RunningCourses (running.ser)
        @Version 0.0.1 [
            0: code <String>
            1: name <String>
            2: lecturer <String>
            3: venue <String>
            4: room <String>
            5: day <String>
            6: time <String>
            7: isConfirmed <boolean>

        ]

--> @Courses (courses.ser)
        @Version 0.0.1 [
            0: year <String>
            1: semester <String>
            2: code <String>
            3: name <String>
            4: lecturer <String>
            5: venue <String>
            6: day <String>
            7: time <String>
            8: score <double>
            9: creditHours <int>
            10: requirement <String>
            11: isVerified <boolean>
            12: lecturerNameChangeability <boolean>

        ]


>> User (user/ )
It's specifically more difficult to deal with the user's data.

--> @Fundamentals (core.ser)
     Refers to the fundamental user details.
        @Version 0.0.1 [
            0: firstName <String>
            1: lastName <String>
            2: nationality <String>
            3: address <String>
            4: telephones <String> | Todo refer to this
            5: maritalStatue <String>
            6: dateOfBirth <String>
            7: placeOfBirth <String>
            8: nameFormat <String>
            9: isTrial <boolean>

            --> Student only details...
            10: monthOfAdmission <int>
            11: yearOfAdmission <int>
            12: semester <String>
            13: matNumber <String>
            14: major <String>
            15: majorCode <String>
            16: minor <String>
            17: minorCode <String>
            18: program <String>
            19: school <String>
            20: division <String>
            21: portalMail <String>
            22: portalPassword <String>
            23: studentMail <String>
            24: studentPassword <String>
            25: level <String>
            26: status <String>
            27: CGPA <double>

        ]
--> @About (about.ser)
--> @Extra / Additional
    @Keys (extra.keys.ser)
    @Values (extra.values.ser)


>> Tasks (tasks/ )
The tasks folder stores data regarding all the 4 main task types,
each in a separate file therein. Every file is an array of String.
@Version 0.0.1 [
    @Todo type (todos.ser)
        0: description <String>
        1: startDate <String> | initially a value returned by MDate.now()
        2: specifiedDuration <int> | days
        3: totalTimeConsumed <int>
        4: isActive <boolean>
        5: dateCompleted <String>
        6: eveIsAlerted <boolean>
        7: doneIsAlerted <boolean>

    @Project type (projects.ser)
        0: projectName <String>
        1: type <String>
        2: startDate <String> | initially a value returned by MDate.now()
        3: specifiedDuration <int>
        4: totalTimeConsumed <int>
        5: isLive <boolean>
        6: dateCompleted <String>
        7: eveIsAlerted <boolean>
        8: completionIsAlerted <boolean>

    @Assignment type
        --> @Assignments (assignments)
        An array of all the assignments.
        Every entry is such that a line-separated value, excluding the members field.
            0: courseName <String>
            1: question <String>
            2: isGroup,
            3: isOn,
            4: modeOfSubmission <String>
            5: startDate <String> | a value returned by MDate.formatDateOnly()
            6: deadLine <String> | a value of MDate.formatDateOnly()
            7: dateSubmitted <String> | a value of MDate.formatDateOnly()
            8: memberCount <int>
            9: eveIsAlerted <boolean>
            10: submissionIsAlerted <boolean>

        --> @Members (groups.members.ser)
        An array of all the members of all the groups.
        Every entry is such that a line-separated value.

    @Event type (events.ser)
        0:title <String>
        1: dateDue <String> | a value returned by MDate.formatDateOnly()
        2: isPending <boolean>
        3: eveIsAlerted <boolean>
        4: timeupIsAlerted <boolean>
]


>> Notifications (alerts.ser)
Stores notifications and information on their read-state.
@Version 0.0.1 [
    0: heading <String>
    1: text <String>
    2: information <String>
    3: time <Date> | full format
    4: isRead <boolean>

]


>> News (news/ )
Should store content of every news.
@Version 0.0.1 [
--> Heads (heads.ser)
--> Bodies (bodies.ser)
--> Links (links.ser)
--> Contents (contents.ser)
--> Access time (accessTime.ser)

]
